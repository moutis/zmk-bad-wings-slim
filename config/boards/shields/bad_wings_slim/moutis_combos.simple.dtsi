/*
*
* SPDX-License-Identifier: MIT
* 
*/

#define COMBO_LAYER(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <40>; \
};
#define COMBO_ANY(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <40>; \
};


combos {
    compatible = "zmk,combos";

/*    KEY POSITION Names for Zaphod
╭─────────────────────╮ ╭─────────────────────╮
│ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
│ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
│ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
╰───────────╮ LH2 LH1 | | RH1 RH2 ╭───────────╯
            ╰─────────╯ ╰─────────╯
*/
//
// control/modes
//
COMBO_ANY(settings, &mo l_cfg,  RH1 RH2) // get the settings/media layer from anywhere
COMBO_ANY(appswitch, &kp RG(TAB), LH2 LH1) // App switch
COMBO_LAYER(docaps, &caps_word, LM1 RM1, l_alpha) // CAPSWORD
COMBO_LAYER(docaps, &kp CAPS, LM2 RM2, l_alpha) // CAPS LOCK

//
// H Digraphs REQUIRE macros (defined earlier) to process
//
COMBO_LAYER(th,  &Th,   LM2 LM1,     l_alpha) // Th
COMBO_LAYER(ch,  &Ch,   LM3 LM2,     l_alpha) // Ch
COMBO_LAYER(wh,  &Wh,   LT3 LT2,     l_alpha) // Wh
COMBO_LAYER(sh,  &Sh,   LM3 LM1,     l_alpha) // Sh
COMBO_LAYER(gh,  &lk_gh H G,   LT2 LT1,     l_alpha) // Gh
COMBO_LAYER(ph,  &Ph,   LB3 LB1,     l_alpha) // Ph

//
// Editing actions (&whitespace)
//
COMBO_ANY(tab,  &kp TAB,        LM4 LM3)
COMBO_ANY(esc,  &kp ESC,        LM4 LM1)
COMBO_ANY(sall, &kp LG(A),      LB4 LB1)
COMBO_ANY(undo, &kp LG(Z),      LB4 LB3)
COMBO_ANY(cut,  &kp LG(X),      LB4 LB2)
COMBO_ANY(copy, &lk LG(X) LG(C), LB3 LB2)
COMBO_ANY(pste, &kp LG(V),      LB2 LB1)
         
/* type a glyph */
COMBO_LAYER(typeQ, &lk_qu Q 0,      LT3 LT1, l_alpha)
COMBO_LAYER(typeZ, &kp Z,           LT4 LT3, l_alpha)
COMBO_LAYER(typeColn, &kp COLON,    RT1 RT3, l_alpha)
COMBO_LAYER(typeSemi, &kp SEMI,     RM0 RM1, l_alpha)
COMBO_LAYER(typeExcl, &kp EXCL,     RT1 RT2, l_alpha)
COMBO_LAYER(typeQues, &kp QMARK,    RT2 RT3, l_alpha)
COMBO_LAYER(typeGrav, &kp GRAVE,    RT3 RT4, l_alpha)
COMBO_LAYER(typeatMk, &kp AT_SIGN,  RT0 RT1, l_alpha)
COMBO_LAYER(typeUnder, &kp UNDER,   RB1 RB3, l_alpha) // _
COMBO_LAYER(typeEqual, &kp EQUAL,   RB2 RB3, l_alpha) // =
COMBO_LAYER(typePercent, &kp PRCNT, RB3 RB4, l_alpha) // percent
COMBO_LAYER(typeNdash, &kp LA(MINUS), RB0 RB1, l_alpha) // N-dash (minus)
COMBO_LAYER(typeMdash, &kp LA(LS(MINUS)), RB0 RB2, l_alpha) // M-dash (minus)
COMBO_LAYER(typeTilde, &kp TILDE,   RB0 RB4, l_alpha) // tilde (not dead key)


};
