/*
*
* SPDX-License-Identifier: MIT
* 
*/

#define COMBO_LAYER(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <40>; \
};
#define COMBO_ANY(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <40>; \
};


combos {
    compatible = "zmk,combos";

/*    KEY POSITION Names for Zaphod
╭─────────────────────╮ ╭─────────────────────╮
│ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
│ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
│ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
╰───────────╮ LH2 LH1 | | RH1 RH2 ╭───────────╯
            ╰─────────╯ ╰─────────╯
*/
//
// control/modes
//
COMBO_ANY(settings, &mo l_cfg,  RH1 RH2) // get the settings/media layer from anywhere
COMBO_ANY(appswitch, &kp RG(TAB), LH2 LH1) // App switch
COMBO_LAYER(docaps, &caps_word, LM1 RM1, l_alpha) // CAPSWORD

//
// Editing actions (&whitespace)
//
COMBO_ANY(tab,  &kp TAB,        LM4 LM3)
COMBO_ANY(esc,  &kp ESC,        LM4 LM1)
COMBO_ANY(sall, &kp LG(A),      LB4 LB1)
COMBO_ANY(undo, &kp K_UNDO,      LB4 LB3)
COMBO_ANY(copy, &lk K_CUT K_COPY, LB3 LB2)
COMBO_ANY(pste, &kp K_PASTE,      LB2 LB1)
//
// H Digraphs REQUIRE macros (defined earlier) to process
//
         
/* type a glyph */
COMBO_LAYER(typeQ, &lk_qu U Q,      LT3 LT1, l_alpha)
COMBO_LAYER(typeZ, &kp Z,           LT4 LT3, l_alpha)
COMBO_LAYER(typeColn, &lk LA(SEMI) COLON,    RT1 RT3, l_alpha)
COMBO_LAYER(typeSemi, &kp SEMI,     RM0 RM1, l_alpha)
COMBO_LAYER(typeExcl, &kp EXCL,     RT1 RT2, l_alpha)
COMBO_LAYER(typeQues, &kp QMARK,    RT2 RT3, l_alpha)
COMBO_LAYER(typeGrav, &kp GRAVE,    RT3 RT4, l_alpha)
COMBO_LAYER(typeatMk, &lk LS(LA(SEMI)) AT_SIGN,  RT0 RT1, l_alpha) // @ (№ if held)
COMBO_LAYER(typeUnder, &kp UNDER,   RB1 RB3, l_alpha) // _
COMBO_LAYER(typeEqual, &lk PRCNT EQUAL,   RB2 RB3, l_alpha) // = (percent if held)

};
